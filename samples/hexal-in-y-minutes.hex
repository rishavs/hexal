[--
    Hey there, Welcome to the Hexal language!
    Hexal is a statically and strongly typed language with a syntax which resembles some of the languages that you are already familiar with, like Typescript, Haxe, C99 etc - but a fully compiled backend.
    Hexal aims to be super simple and super boring. It doesn't have any new mind-bending concept which would change all programming languages or help me do a PhD. But its tiny, modern and adheres very tightly to "1 way of doing a thing" zen. Hexal's main focus is instead on learning from other languages and on giving a great dev-exp.
    
    The major features of Hexal are:
    1. Simple and tiny syntax
    2. Strong type system inspired by that of Typescript and Crystal
    3. Value Types!
    4. simple OOPs  
    5. Coroutines
    6. Destructuring
    7. 1 based arrays
    6. LLVM backend to emit fast executables
    and a Package Manager to tie all this up!
    
    
    This files aims to give a quick tour of the (WIP) Hexal language (and a quick test file for me to test against the compiler!). 
    This is an executable tutorial.  You can compile and run it using the Hexal compiler. 
    
    Look for the slash-star marks surrounding these paragraphs.  We are inside
    a "Multiline comment".  We can leave some notes here that will get ignored
    by the compiler.

   Multiline comments are also used to generate javadoc-style documentation for
   haxedoc.  They will be used for haxedoc if they immediately precede a class,
   class function, or class variable. 
--] 

-- Double dashes like this will give a single-line comment.

-- a module is actually just a class instance. real path for all vars is is lib.path.module.declName



var a1 = 10     -- We can also add comments within lines like this.

const a2 = 10

var a3: Int = 30
 
var a4 = a3 -- In Hexal, everything passes by value.

var a5 = refs a3 --  Unless explicitly called as a ref. Here a5 is a pointer for a3

a3 = 90

a5.value -- This is how we can get the referred value from the pointer. 
@@ a5 -- the goggles allow you to quickly show debug text on the console 
@@ a5.points_to -- this will show the pointer position


b1: Bool = true

-- all free functions are actually class methods for the module

t1 = (a: Int, b: Int)  -- this is a tuple. A data structure with keys, fixed types and size
list: (Int) = (1, 2, 3)
@@ list[1]  -- lists in Hexal start from 1. this will return 1
@@ list[2]  -- 2
@@ list[3]  -- 3

map: {String => String} = {
    "one" : "bird",
    "two" : "flowers"
}



mySet = @

myList3 : List<String> = List["hi", "hello"]
mySet : Set<String> = Set["hi", "hello"]

myTuple : Tuple<String, Int, Bool> = Tuple["one", 1, true]
myTuple2: Tuple<2 Int> = Tuple[1, 2]
myDict : Dict<String, String> = Dict[
    "one" => "bird",
    "two" => "flowers"
]


class Person (name: String, age: Int) {
    address: String

    hasName () -> String {
        return self.name 
    }
    hasAge () -> Int {
        return self.age 
    }
}

var bob: Person = Person("Bob", 21)
@@ bob.sayName()

class Student (school: String) {

    studiesAt () -> String {
        return self.school
    }

}

const jane = Student("Jane", 13, "Grand Trunk School")

type NewType = Int | String                     -- We can create new types from old types
type Direction = East | West | North | South    -- A type declaration can also be used as an enum. 
Here each enum member is an empty class without an interface, properties or methods. eg. East is same as `class East {}`


c1: [String] = ["abc", "pqr", "this is a 1 indexed array!"]
c2: [String, Int] = ["a": 1, "b": 2, "c" = 3]



destructuring assignments array & objects 


adder (a: Int, b: Int) -> Int {
    return a + b
}

@@ adder 1, 2 -- the () brackets for calling functions are optional, if there are any arguments. But if there are no arguments, you must use ().

adder : (String, String) -> String = (a, b) {
    return a + b
}





