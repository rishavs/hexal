var x = 1
var y: Int = 2
const p = true

getFavoriteNumber() -> Int {
    return 26
}

greet(name: string) {
    @@"Hello, " + name + "!!"
}

adder (a: Int, b: Int) -> Int {
    return a + b
}

@@ adder 1, 2 -- the () brackets for calling functions are optional, if there are any arguments. But if there are no arguments, you must use ().

adder : (String, String) -> String = fn (a, b) {
    return a + b
}


printName( first: string, last?: string ) {
    // ...
}
// Both OK
printName({ first: "Bob" });
printName({ first: "Alice", last: "Alisson" });

class Point {
    var x: Int
    var y: Int
    private const z: Int = 13 

    // Normal signature with defaults
    new(x = 0, y = 0) {
        self.x = x
        self.y = y
    }

    scale(n: number): void {
        self.x *= n;
        self.y *= n;
    }
}

class Animal {
    move() {
        console.log("Moving along!");
    }
}

class Dog < Animal {
    woof(times: number) {
        for (let i = 0; i < times; i++) {
            console.log("woof!");
        }
    }
}

const d = Dog();
// Base class method
d.move();
// Derived class method
d.woof(3);

class Base {
    greet() {
        console.log("Hello, world!");
    }
}

class Derived<Base {
    greet(name?: string) {
        if (name === undefined) {
            parent.method()
        } else {
            console.log(`Hello, ${name.toUpperCase()}`)
        }
    }
}

const d = Derived();
d.greet();
d.greet("reader");